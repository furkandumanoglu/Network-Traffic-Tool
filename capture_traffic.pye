# capture_traffic.py

from scapy.all import sniff
import pandas as pd
from datetime import datetime

# Define a list to store captured packet data
packets_data = []

def packet_callback(packet):
    """
    Callback function to process each captured packet.
    Extracts timestamp, source IP, destination IP, protocol, and length.
    """
    # Extract packet details
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    src_ip = packet[0][1].src if packet.haslayer('IP') else 'N/A'
    dst_ip = packet[0][1].dst if packet.haslayer('IP') else 'N/A'
    protocol = packet[0][1].proto if packet.haslayer('IP') else 'N/A'
    length = len(packet)
    
    # Append data to the list
    packets_data.append({
        'Timestamp': timestamp,
        'Source IP': src_ip,
        'Destination IP': dst_ip,
        'Protocol': protocol,
        'Length': length
    })

def capture_packets(interface='en0', count=100):
    """
    Captures network packets on the specified interface.
    
    Args:
        interface (str): Network interface to monitor (e.g., 'en0', 'en0').
        count (int): Number of packets to capture.
    """
    print(f"Starting packet capture on {interface} for {count} packets...")
    sniff(iface=interface, prn=packet_callback, count=count)
    print("Packet capture completed.")

def save_to_csv(filename='network_traffic.csv'):
    """
    Saves captured packet data to a CSV file.
    
    Args:
        filename (str): Name of the CSV file.
    """
    df = pd.DataFrame(packets_data)
    df.to_csv(filename, index=False)
    print(f"Data saved to {filename}")

if __name__ == "__main__":
    # Customize interface and packet count as needed
    capture_packets(interface='wlan0', count=100)  # Replace 'wlan0' with your network interface
    save_to_csv('network_traffic.csv')

